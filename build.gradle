import java.util.Optional as Opt

buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'

	}
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
		classpath('org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config:2.0.0.RELEASE')
		classpath("org.springframework.boot:spring-boot-starter-actuator:2.0.5.RELEASE")
		classpath('org.projectlombok:lombok:1.18.2')
		classpath('org.owasp:dependency-check-gradle:3.3.2')
	}

}

plugins {
	id "net.foragerr.jmeter" version "1.1.0-4.0" // "1.0.10-3.3"
	id 'com.github.eerohele.saxon-gradle' version '0.6.0'
}

ext['mockito.version'] = '2.19.1'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'org.owasp.dependencycheck'

group = 'com.hero'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	jcenter()
}

ext {
	springCloudVersion = 'Finchley.SR1'
}


dependencies {

	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.cloud:spring-cloud-starter-config')
	//implementation("org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6')
	implementation('mysql:mysql-connector-java:8.0.12')
	implementation('com.google.guava:guava:26.0-jre')
	compileOnly('org.projectlombok:lombok:1.18.2')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.apache.derby:derby:10.14.2.0')
	
	//Transitive dependency clobbers for security updates:
	implementation('com.google.protobuf:protobuf-java:2.6.1')
}



dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


dependencyCheck{
	suppressionFile = file("$project.rootDir/etc/dependency-check-surpression.xml")
	outputDirectory = file("$project.buildDir/reports/dependency-check")
}
bootRun {
	//jvmArgs = ["-Dspring.profiles.active=local"]
}

bootJar {
	classifier = 'boot'
}


docker {
	name "124837307879.dkr.ecr.us-east-1.amazonaws.com/${project.group}/${bootJar.baseName}:"+
			Opt.ofNullable(System.getenv('BUILD_NUMBER')).orElse("LOCAL")
	files new File(project.buildDir, "libs/$project.name-$project.version-boot.jar")
	buildArgs(
			['JAR': "$project.name-$project.version-boot.jar",
			 'DATABASE_HOST': Opt.ofNullable(System.getenv("EID_DATABASE_HOST")).orElse(""),
			 'DATABASE_USER': Opt.ofNullable(System.getenv("EID_DATABASE_USER")).orElse(""),
			 'DATABASE_PASSWORD': Opt.ofNullable(System.getenv("EID_DATABASE_PASSWORD")).orElse("")
			])
	tags "latest"

}



jacoco {
	toolVersion = "0.8.1"
}

jacocoTestReport {
	group = "Reporting"
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}
}


tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
	}
}
findbugsMain.ignoreFailures false
findbugsTest.ignoreFailures false


tasks.clean.dependsOn(tasks.dockerClean)
tasks.docker.dependsOn(tasks.bootJar)
tasks.check.finalizedBy(tasks.jacocoTestReport)

def rmiKeystore = new File(project.rootDir, "src/test/jmeter/rmi_keystore.jks").getAbsolutePath()


jmeter {
	enableReports = true
	jmTestFiles = [file("src/test/jmeter/perf1.jmx")]
	//resultsLog = new File(project.buildDir, "jmeter-report/loadtest-results.xml")
	csvLogFile = false
	enableExtendedReports = true
	jmSystemProperties = ["-Dlog4j2.loggerContextFactory=org.apache.logging.log4j.simple.SimpleLoggerContextFactory"]
	jmLog = new File(project.buildDir, "jmeter.log")
	reportXslt= file("build/jmeter-report/jmeter-results-detail-report_21.xsl")
	reportPostfix = ""
}

task readDeployedEndpoint(type:Exec) {
	executable 'sh'
	args "-c", "kubectl get service eid-validator-lb --namespace dev -o json | jq .status.loadBalancer.ingress[0].hostname | sed 's/\\\"//g'"

	//store the output instead of printing to the console:
	standardOutput = new ByteArrayOutputStream()

	doLast {
		def deployedEndpoint = standardOutput.toString()
		logger.lifecycle("Found deployed load balancer "+deployedEndpoint)
		project.jmeter {
			jmUserProperties = ["hostname=$deployedEndpoint"]
		}
	}
}


tasks.jmRun.dependsOn(tasks.readDeployedEndpoint)

task copyTemplateFiles(type:Copy) {
	from  fileTree(dir: "$project.projectDir/etc/jmeter", include: '**/*')
	into "${buildDir}/jmeter-report"
}

task moveXsltFiles(type:Copy) {
	from  fileTree(dir: "$project.buildDir/jmeter-report", include: '**/*')
	into "${buildDir}/reports/jmeter"
}
tasks.jmReport.dependsOn(tasks.copyTemplateFiles)
tasks.jmReport.finalizedBy(tasks.moveXsltFiles)

